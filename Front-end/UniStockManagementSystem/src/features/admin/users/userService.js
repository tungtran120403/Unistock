import axios from "axios";

const API_URL = `${import.meta.env.VITE_API_URL}/admin/users`; // ‚úÖ API cho User Management

// ‚úÖ H√†m ƒë·ªÉ l·∫•y Token t·ª´ LocalStorage
const authHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {}; // ‚úÖ N·∫øu kh√¥ng c√≥ token, tr·∫£ v·ªÅ object r·ªóng
};

// üü¢ **API T·∫°o User**
export const createUser = async (userData) => {
  try {
    const response = await axios.post(API_URL, userData, {
      headers: { ...authHeader(), "Content-Type": "application/json" },
    });
    console.log("‚úÖ [createUser] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [createUser] L·ªói khi t·∫°o user:", error);
    throw error;
  }
};


// ‚úÖ API ki·ªÉm tra email
export const checkEmailExists = async (email) => {
  try {
    const response = await axios.get(`${API_URL}/check-email`, {
      params: { email },
      headers: authHeader(), // ‚úÖ G·ª≠i token c√πng request
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra email:", error);
    return false;
  }
};

// üü¢ **L·∫•y danh s√°ch Users**
export const getUsers = async (page,size) => {
  try {
    const response = await axios.get(API_URL, {params: { page, size }, headers: authHeader() });
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch Users:", error);
    throw error;
  }
};

// üî¥ **X√≥a user theo ID**
export const deleteUserById = async (userId) => {
  try {
    await axios.delete(`${API_URL}/${userId}`, { headers: authHeader() });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a User:", error);
    throw error;
  }
};

// üîÑ **Toggle tr·∫°ng th√°i `isActive` c·ªßa User**
export const toggleUserStatus = async (userId, newStatus) => {
  try {
    const response = await axios.patch(
      `${API_URL}/${userId}/status`,
      { isActive: newStatus }, // ‚úÖ G·ª≠i tr·∫°ng th√°i m·ªõi
      { headers: authHeader() }
    );
    console.log("‚úÖ API Response:", response.data); // Debug API
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    throw error;
  }
};

// üü¢ **C·∫≠p nh·∫≠t User**
export const updateUser = async (userId, updatedUser) => {
  try {
    const response = await axios.put(`${API_URL}/${userId}`, updatedUser, {
      headers: { ...authHeader(), "Content-Type": "application/json" },
    });
    console.log("‚úÖ [updateUser] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [updateUser] L·ªói khi c·∫≠p nh·∫≠t user:", error);
    throw error;
  }
};

export const getUserById = async (userId) => {
  try {
    const response = await axios.get(`${API_URL}/${userId}`, {
      headers: authHeader(),
    });

    console.log("‚úÖ [getUserById] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [getUserById] L·ªói khi l·∫•y th√¥ng tin user:", error);
    throw error;
  }
};