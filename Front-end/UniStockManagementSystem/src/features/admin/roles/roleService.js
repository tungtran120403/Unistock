import axios from "axios";

const API_URL = `${import.meta.env.VITE_API_URL}/admin`;

// ‚úÖ H√†m l·∫•y Token t·ª´ LocalStorage v·ªõi ki·ªÉm tra r√µ r√†ng
const authHeader = () => {
  const token = localStorage.getItem("token");

  if (!token) {
    console.warn("üö® Kh√¥ng t√¨m th·∫•y token trong localStorage!");
    return {};
  }

  console.log("üîë G·ª≠i Token:", token);
  return { Authorization: `Bearer ${token}` };
};

// üü¢ **Th√™m Vai Tr√≤ m·ªõi**
export const addRole = async (newRole) => {
  try {
    console.log("üì¢ [addRole] G·ª≠i request th√™m vai tr√≤:", newRole);
    
    const response = await axios.post(`${API_URL}/roles`, newRole, {
      headers: {
        ...authHeader(), // ‚úÖ G·ª≠i token x√°c th·ª±c
        "Content-Type": "application/json", // ‚úÖ ƒê·ªãnh d·∫°ng d·ªØ li·ªáu g·ª≠i ƒëi
      },
    });

    console.log("‚úÖ [addRole] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [addRole] L·ªói khi th√™m Vai Tr√≤:", error);
    throw error;
  }
};

// üü¢ **L·∫•y danh s√°ch Vai Tr√≤**
export const getAllRoles = async () => {
  try {
    console.log("üì¢ [getAllRoles] G·ª≠i request ƒë·∫øn:", `${API_URL}/roles`);
    const response = await axios.get(`${API_URL}/roles`, { headers: authHeader() });

    console.log("‚úÖ [getAllRoles] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [getAllRoles] L·ªói khi l·∫•y danh s√°ch Vai Tr√≤:", error);
    throw error;
  }
};

// üü¢ **L·∫•y danh s√°ch Permissions**
export const getAllPermissions = async () => {
  try {
    console.log("üì¢ [getAllPermissions] G·ª≠i request ƒë·∫øn:", `${API_URL}/permissions`);
    const response = await axios.get(`${API_URL}/permissions`, { headers: authHeader() });

    console.log("‚úÖ [getAllPermissions] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [getAllPermissions] L·ªói khi l·∫•y danh s√°ch Permissions:", error);
    throw error;
  }
};

// üü¢ **L·∫•y Permissions c·ªßa m·ªôt Role c·ª• th·ªÉ**
export const getRolePermissions = async (roleId) => {
  try {
    console.log("üì¢ [getRolePermissions] G·ª≠i request ƒë·∫øn:", `${API_URL}/roles/${roleId}/permissions`);
    const response = await axios.get(`${API_URL}/roles/${roleId}/permissions`, { headers: authHeader() });

    console.log("‚úÖ [getRolePermissions] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå [getRolePermissions] L·ªói khi l·∫•y danh s√°ch Permissions c·ªßa Role ID ${roleId}:`, error);
    throw error;
  }
};

// üü¢ **C·∫≠p nh·∫≠t Vai Tr√≤**
export const updateRole = async (id, updatedRole) => {
  try {
    console.log("üì¢ [updateRole] C·∫≠p nh·∫≠t role:", updatedRole);
    const response = await axios.put(`${API_URL}/roles/${id}`, updatedRole, {
      headers: authHeader(),
    });
    console.log("‚úÖ [updateRole] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [updateRole] L·ªói khi c·∫≠p nh·∫≠t Vai Tr√≤:", error);
    throw error;
  }
};

// üîÑ **Toggle tr·∫°ng th√°i `isActive` c·ªßa Vai Tr√≤**
export const toggleRoleStatus = async (id, newStatus) => {
  try {
    console.log("üì¢ [toggleRoleStatus] C·∫≠p nh·∫≠t tr·∫°ng th√°i role:", { id, newStatus });
    const response = await axios.patch(
      `${API_URL}/roles/${id}/status`,
      { active: newStatus },
      { headers: authHeader() }
    );
    console.log("‚úÖ [toggleRoleStatus] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [toggleRoleStatus] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i Vai Tr√≤:", error);
    throw error;
  }
};

// üî¥ **X√≥a Vai Tr√≤ theo ID**
export const deleteRole = async (id) => {
  try {
    console.log(`üì¢ [deleteRole] X√≥a role ID: ${id}`);
    await axios.delete(`${API_URL}/roles/${id}`, { headers: authHeader() });
    console.log("‚úÖ [deleteRole] X√≥a th√†nh c√¥ng");
  } catch (error) {
    console.error("‚ùå [deleteRole] L·ªói khi x√≥a Vai Tr√≤:", error);
    throw error;
  }
};
