import axios from "axios";

const API_URL = `${import.meta.env.VITE_API_URL}/user/sale-orders`; // ‚úÖ API Sale Orders

// ‚úÖ H√†m ƒë·ªÉ l·∫•y Token t·ª´ LocalStorage
const authHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

// üü¢ **L·∫•y danh s√°ch Sale Orders (H·ªó tr·ª£ ph√¢n trang)**
export const getSaleOrders = async (page, size) => {
  try {
    const response = await axios.get(API_URL, {
      params: { page, size },
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå [getSaleOrders] L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
    throw error;
  }
};

export const getNextOrderCode = async () => {
  try {
    const response = await axios.get(`${API_URL}/next-code`, {
      headers: authHeader(),
    });
    return response.data; // M√£ ƒë∆°n h√†ng, v√≠ d·ª• "ƒêH00003"
  } catch (error) {
    console.error("‚ùå [getNextOrderCode] L·ªói:", error);
    throw error;
  }
};

// üü¢ **L·∫•y chi ti·∫øt Sale Order theo ID**
export const getSaleOrderById = async (orderId) => {
  try {
    const response = await axios.get(`${API_URL}/${orderId}`, {
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå [getSaleOrderById] L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
    throw error;
  }
};


export const addSaleOrder = async (orderData) => {
  try {
    const response = await axios.post(API_URL, orderData, {
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå [addSaleOrder] L·ªói khi th√™m ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üîÑ **Toggle tr·∫°ng th√°i Sale Order**
export const toggleSaleOrderStatus = async (orderId, newStatus) => {
  try {
    const response = await axios.patch(
      `${API_URL}/${orderId}/status`,
      { status: newStatus },
      { headers: authHeader() }
    );
    console.log("‚úÖ [toggleSaleOrderStatus] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [toggleSaleOrderStatus] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    throw error;
  }
};



export const getProducts = async () => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/products/active`,
      {
        headers: authHeader(),
        params: {
          page: 0,
          size: 1000, // L·∫•y ƒë·ªß s·∫£n ph·∫©m, ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m active:", error);
    throw error;
  }
};

export const updateOrder = async (orderId, orderData) => {
  try {
    const response = await axios.put(
      `${API_URL}/${orderId}`,
      orderData,
      { headers: authHeader() }
    );
    return response.data;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    throw error;
  }

};

export const getTotalQuantityOfProduct = async (productId) => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/inventory/product/${productId}/warehouses`,
      {
        headers: authHeader(),
      }
    );
    return response.data;
  } catch (error) {
    console.error("‚ùå [getTotalQuantityOfProduct] L·ªói khi l·∫•y t·ªïng t·ªìn kho:", error);
    throw error;
  }
};

export const getProductMaterialsByProduct = async (productId) => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/products/product-materials/${productId}?page=0&size=100`,
      { headers: authHeader() }
    );
    // Gi·∫£ ƒë·ªãnh BE tr·∫£ v·ªÅ d·ªØ li·ªáu ·ªü response.data.content
    return response.data.content;
  } catch (error) {
    console.error("Error fetching product materials for product", productId, error);
    throw error;
  }
};

export const cancelSaleOrder = async (orderId, reason) => {
  try {
    const response = await axios.put(
      `${API_URL}/${orderId}/cancel`,
      { rejectionReason: reason },
      {
        headers: authHeader()
      }
    );
    return response.data;
  } catch (error) {
    console.error("‚ùå [cancelSaleOrder] L·ªói:", error);
    throw error;
  }
};

export async function setPreparingStatus(payload) {
  const { saleOrderId, ...rest } = payload;
  try {
    const response = await axios.put(
      `${API_URL}/${saleOrderId}/set-preparing`,
      rest,
      { headers: authHeader() }
    );
    return response.data;
  } catch (error) {
    console.error("‚ùå [setPreparingStatus] L·ªói khi chuy·ªÉn tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    throw error;
  }
}




