import { useState, useEffect } from "react";
import { addSaleOrder, getNextOrderCode,  getSaleOrders, toggleSaleOrderStatus, updateOrder } from "./saleOrdersService";

const useSaleOrder = () => {
  const [saleOrders, setSaleOrders] = useState([]); // ‚úÖ Danh s√°ch ƒë∆°n h√†ng
  const [totalPages, setTotalPages] = useState(1); // ‚úÖ T·ªïng s·ªë trang
  const [totalElements, setTotalElements] = useState(0); // ‚úÖ T·ªïng s·ªë ƒë∆°n h√†ng

  // üü¢ **L·∫•y danh s√°ch Sale Orders c√≥ ph√¢n trang**
  const fetchPaginatedSaleOrders = async (page = 0, size = 10) => {
    try {
      const data = await getSaleOrders(page, size);
      console.log("üì¢ API tr·∫£ v·ªÅ d·ªØ li·ªáu:", data); // ‚úÖ In d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
  
      setSaleOrders(data.content || []); // ‚úÖ Ki·ªÉm tra xem `data.content` c√≥ ƒë√∫ng kh√¥ng
      setTotalPages(data.totalPages || 1);
      setTotalElements(data.totalElements || 0);
    } catch (error) {
      console.error("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch Sale Orders:", error);
    }
  };
  

  // üîÑ **Toggle tr·∫°ng th√°i ƒë∆°n h√†ng**
  const toggleStatus = async (orderId, currentStatus) => {
    try {
      const newStatus = currentStatus === "PENDING" ? "CONFIRMED" : "PENDING"; // ‚úÖ V√≠ d·ª• ƒë·∫£o tr·∫°ng th√°i
      const updatedOrder = await toggleSaleOrderStatus(orderId, newStatus);

      setSaleOrders((prevOrders) =>
        prevOrders.map((order) =>
          order.orderId === orderId ? { ...order, status: updatedOrder.status } : order
        )
      );
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    }
  };

  const getNextCode = async () => {
    try {
      const code = await getNextOrderCode();
      return code; // v√≠ d·ª• "ƒêH00003"
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y m√£ ƒë∆°n h√†ng ti·∫øp theo:", error);
      throw error;
    }
  };

  // ‚úÖ G·ªçi API ngay khi Component ƒë∆∞·ª£c mount
  useEffect(() => {
    fetchPaginatedSaleOrders();
  }, []);

  const addOrder = async (orderData) => {
    try {
      const data = await addSaleOrder(orderData);
      return data;
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m ƒë∆°n h√†ng:", error);
      throw error;
    }
  };

  const updateExistingOrder = async (orderId, orderData) => {
    try {
      const updated = await updateOrder(orderId, orderData);
      return updated; // Tr·∫£ v·ªÅ data sau khi update
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", err);
      throw err;
    }
  };

  return { saleOrders, fetchPaginatedSaleOrders, toggleStatus, totalPages, totalElements, getNextCode, addOrder, updateExistingOrder };
};

export default useSaleOrder;
