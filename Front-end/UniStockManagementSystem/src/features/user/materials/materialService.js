import axios from "axios";
import ExcelJS from "exceljs";
import { saveAs } from "file-saver";

const API_URL = `${import.meta.env.VITE_API_URL}/user/materials`;

// H√†m ƒë·ªÉ l·∫•y Token t·ª´ LocalStorage
const authHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

// L·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu ph√¢n trang
export const getAllMaterials = async (page = 0, size = 10) => {
  try {
    const response = await axios.get(API_URL, {
      headers: authHeader(),
      params: {
        page: page,
        size: size,
      },
    });

    console.log("üìå [getAllMaterials] API Response:", response.data);

    if (response.data && response.data.content) {
      // üîÑ L·∫•y danh m·ª•c lo·∫°i v·∫≠t t∆∞ v√† ƒë·∫£m b·∫£o l√† m·∫£ng
      const rawCategories = await fetchMaterialCategories();
      const categories = Array.isArray(rawCategories.content)
        ? rawCategories.content
        : Array.isArray(rawCategories)
          ? rawCategories
          : [];

      // ‚úÖ G·∫Øn t√™n danh m·ª•c cho t·ª´ng v·∫≠t t∆∞
      const materials = response.data.content.map((material) => {
        let typeName = material.typeName || "Kh√¥ng c√≥ danh m·ª•c";
        if (material.typeId) {
          const category = categories.find(
            (cat) => cat.materialTypeId === material.typeId
          );
          typeName = category ? category.name : typeName;
        }
        return {
          ...material,
          typeName,
        };
      });

      return {
        materials,
        totalPages: response.data.totalPages || 1,
        totalElements:
          response.data.totalElements || response.data.content.length,
      };
    } else {
      console.warn("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá!");
      return {
        materials: [],
        totalPages: 1,
        totalElements: 0,
      };
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu:", error);
    throw error;
  }
};


// L·∫•y nguy√™n v·∫≠t li·ªáu theo ID
export const getMaterialById = async (materialId) => {
  try {
    const response = await axios.get(`${API_URL}/${materialId}`, {
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error(`‚ùå L·ªói khi l·∫•y nguy√™n v·∫≠t li·ªáu c√≥ ID ${materialId}:`, error);
    throw error;
  }
};

// T·∫°o nguy√™n v·∫≠t li·ªáu m·ªõi
export const createMaterial = async (formData) => {
  try {
    const response = await axios.post(
      `${import.meta.env.VITE_API_URL}/user/materials/create`,
      formData,
      {
        headers: {
          ...authHeader(),
          "Content-Type": "multipart/form-data",
        },
      }
    );

    console.log("‚úÖ [createMaterial] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o nguy√™n v·∫≠t li·ªáu:", error.response?.data || error.message);
    throw error;
  }
};

// C·∫≠p nh·∫≠t nguy√™n v·∫≠t li·ªáu
export const updateMaterial = async (id, formData) => {
  try {
    const response = await axios.put(
      `${API_URL}/${id}`,
      formData,
      {
        headers: {
          ...authHeader(),
          "Content-Type": "multipart/form-data",
        },
      }
    );
    console.log("‚úÖ [updateMaterial] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nguy√™n v·∫≠t li·ªáu:", error);
    throw error;
  }
};

// Thay ƒë·ªïi tr·∫°ng th√°i nguy√™n v·∫≠t li·ªáu
export const toggleMaterialStatus = async (materialId) => {
  try {
    const response = await axios.patch(
      `${API_URL}/${materialId}/toggle-status`,
      {},
      { headers: authHeader() }
    );
    console.log("‚úÖ [toggleMaterialStatus] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i nguy√™n v·∫≠t li·ªáu:", error);
    throw error;
  }
};


// L·∫•y danh s√°ch danh m·ª•c nguy√™n v·∫≠t li·ªáu
export const fetchMaterialCategories = async () => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/material-types`,
      {
        headers: authHeader(),
      }
    );
    console.log("Fetched material categories:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch danh m·ª•c nguy√™n v·∫≠t li·ªáu:", error);
    throw error;
  }
};

// Ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu ƒë√£ t·ªìn t·∫°i
export const checkMaterialCodeExists = async (materialCode, excludeId = null) => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/materials/check-material-code/${materialCode}`,
      { headers: authHeader(), params: { excludeId } }
    );
    console.log("üìå [checkMaterialCodeExists] API Response:", response.data);
    return response.data.exists;
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu:", error.response?.data || error.message);
    throw error;
  }
};

// Preview import v·∫≠t t∆∞
export const previewImport = async (file) => {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const response = await axios.post(
      `${API_URL}/preview-import`,
      formData,
      {
        headers: {
          ...authHeader(),
          "Content-Type": "multipart/form-data",
        },
      }
    );

    console.log("‚úÖ [previewImport] Xem tr∆∞·ªõc d·ªØ li·ªáu th√†nh c√¥ng:", response.data);
    return response.data; // M·∫£ng MaterialPreviewDTO
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra file:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "L·ªói khi xem tr∆∞·ªõc d·ªØ li·ªáu t·ª´ file");
  }
};

// Import Excel
export const importExcel = async (file) => {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const response = await axios.post(
      `${API_URL}/import`,
      formData,
      {
        headers: {
          ...authHeader(),
          "Content-Type": "multipart/form-data",
        },
      }
    );

    console.log("‚úÖ [importExcel] Import th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi import file:", error.response?.data || error.message);
    throw new Error(error.response?.data?.message || "L·ªói khi import file");
  }
};

// Export Excel
export const exportExcel = async () => {
  try {
    const response = await axios.get(`${API_URL}/export`, {
      headers: authHeader(),
      responseType: "blob",
    });
    console.log("‚úÖ [exportExcel] Xu·∫•t file Excel v·∫≠t t∆∞ th√†nh c√¥ng");
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi xu·∫•t Excel v·∫≠t t∆∞:", error.response?.data || error.message);
    throw error;
  }
};

//l·∫•y danh s√°ch c√°c v·∫≠t li·ªáu ƒëang s·ª≠ d·ª•ng
export const getAllActiveMaterials = async () => {
  try {
    const response = await axios.get(
      `${import.meta.env.VITE_API_URL}/user/materials/active`,
      { headers: authHeader() }
    );
    return response.data; // Danh s√°ch nguy√™n v·∫≠t li·ªáu ƒëang s·ª≠ d·ª•ng
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu ƒëang s·ª≠ d·ª•ng:", error);
    throw error;
  }
};




// T·∫£i template v·∫≠t t∆∞
export const downloadMaterialTemplate = async () => {
  try {
    const response = await axios.get(`${API_URL}/template`, {
      responseType: "blob", // ƒê·ªÉ nh·∫≠n d·ªØ li·ªáu nh·ªã ph√¢n
      headers: authHeader(),
    });
    console.log("‚úÖ [downloadMaterialTemplate] T·∫£i template th√†nh c√¥ng");
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i template:", error.response?.data || error.message);
    throw error;
  }
};
