//
//package vn.unistock.unistockmanagementsystem.utils;
//
//import org.springframework.boot.CommandLineRunner;
//import org.springframework.stereotype.Component;
//import org.springframework.transaction.annotation.Transactional;
//import vn.unistock.unistockmanagementsystem.entities.Permission;
//import vn.unistock.unistockmanagementsystem.entities.Role;
//import vn.unistock.unistockmanagementsystem.entities.RolePermission;
//import vn.unistock.unistockmanagementsystem.features.admin.permission.PermissionRepository;
//import vn.unistock.unistockmanagementsystem.features.admin.role.RoleRepository;
//
//import java.util.Iterator;
//import java.util.List;
//import java.util.Optional;
//
//@Component
//public class DataInitializer implements CommandLineRunner {
//
//    private final RoleRepository roleRepository;
//    private final PermissionRepository permissionRepository;
//
//    public DataInitializer(RoleRepository roleRepository, PermissionRepository permissionRepository) {
//        this.roleRepository = roleRepository;
//        this.permissionRepository = permissionRepository;
//    }
//
//    @Override
//    @Transactional
//    public void run(String... args) {
//        System.out.println("üöÄ [INIT] Ki·ªÉm tra Role & Permission...");
//
//        // üü¢ **T·∫°o Role ADMIN n·∫øu ch∆∞a t·ªìn t·∫°i**
//        Role adminRole = roleRepository.findByRoleName("ADMIN")
//                .orElseGet(() -> {
//                    Role role = new Role();
//                    role.setRoleName("ADMIN");
//                    role.setDescription("Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng");
//                    role.setIsActive(true);
//                    return roleRepository.save(role); // ‚úÖ L∆∞u ngay ƒë·ªÉ tr√°nh l·ªói Hibernate
//                });
//
//        // üü¢ **T·∫°o Role USER n·∫øu ch∆∞a t·ªìn t·∫°i**
//        Role userRole =  roleRepository.findByRoleName("USER")
//                .orElseGet(() -> {
//                    Role role = new Role();
//                    role.setRoleName("USER");
//                    role.setDescription("Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng");
//                    role.setIsActive(true);
//                    return roleRepository.save(role);
//                });
//
//        // üü¢ **L·∫•y t·∫•t c·∫£ permission c√≥ API b·∫Øt ƒë·∫ßu b·∫±ng `/api/unistock/admin/`**
//        List<Permission> adminPermissions = permissionRepository.findByUrlPatternStartingWith("/api/unistock/admin/");
//
//        if (!adminPermissions.isEmpty()) {
//            System.out.println("üîπ T·ªïng s·ªë permission d√†nh cho ADMIN: " + adminPermissions.size());
//
//            // ‚úÖ **X√≥a t·ª´ng ph·∫ßn t·ª≠ trong danh s√°ch (tr√°nh m·∫•t tham chi·∫øu)**
//            Iterator<RolePermission> iterator = adminRole.getRolePermissions().iterator();
//            while (iterator.hasNext()) {
//                iterator.next();
//                iterator.remove();
//            }
//
//            // ‚úÖ **Th√™m quy·ªÅn m·ªõi v√†o danh s√°ch hi·ªán t·∫°i**
//            for (Permission permission : adminPermissions) {
//                adminRole.getRolePermissions().add(new RolePermission(null, adminRole, permission));
//            }
//
//            // ‚úÖ **L∆∞u l·∫°i role**
//            roleRepository.save(adminRole);
//
//            System.out.println("‚úÖ ƒê√£ g√°n t·∫•t c·∫£ permission admin cho role ADMIN!");
//        } else {
//            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ permission n√†o cho role ADMIN!");
//        }
//
//        System.out.println("üöÄ [INIT] Ho√†n t·∫•t!");
//
//        if (userRole != null) {
//            // L·∫•y t·∫•t c·∫£ permission b·∫Øt ƒë·∫ßu b·∫±ng /api/unistock/user/
//            List<Permission> userPermissions = permissionRepository.findByUrlPatternStartingWith("/api/unistock/user/");
//            if (!userPermissions.isEmpty()) {
//                System.out.println("üîπ T·ªïng s·ªë permission d√†nh cho USER: " + userPermissions.size());
//
//                // Xo√° t·∫•t c·∫£ role-permission c≈© c·ªßa USER
//                Iterator<RolePermission> userIterator = userRole.getRolePermissions().iterator();
//                while (userIterator.hasNext()) {
//                    userIterator.next();
//                    userIterator.remove();
//                }
//
//                // Th√™m quy·ªÅn m·ªõi cho USER
//                for (Permission permission : userPermissions) {
//                    userRole.getRolePermissions().add(new RolePermission(null, userRole, permission));
//                }
//
//                // L∆∞u l·∫°i role
//                roleRepository.save(userRole);
//                System.out.println("‚úÖ ƒê√£ g√°n t·∫•t c·∫£ permission user cho role USER!");
//            } else {
//                System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ permission n√†o cho role USER!");
//            }
//        }
//
//        System.out.println("üöÄ [INIT] Ho√†n t·∫•t!");
//    }
//
//}
//
